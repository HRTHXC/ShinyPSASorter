psaDeath <- 0
planted <- 0
lifeRate <- 0
searching <- paste(motherName[i], fatherName[j], sep = "_")
#print(searching)
for (k in 1:rowCount){
testingValue <- test[k, "BrCrCode"]
#print(testingValue)
if(searching == testingValue){
psaDeath <- (psaDeath + test[k, "PsaDeaths"])
psaDeathDebug[overallUniques] <- psaDeath
planted <- (planted + test[k, "Planted"])
plantedDebug[overallUniques] <- planted
}
}
#create a vector for me!
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
#if we couldn't calculate an average before, ignore it
if(planted == 0){
visibleOutputDebug[overallUniques] <-  "NA"
}
#values under 40 are discarded, but still printed out (sample too small)
else if(planted < 40 & !(planted == 0)){
visibleOutputDebug[overallUniques] <- paste(lifeRate, "STS")
}
#otherwise, lets print it out, we can use the values later for calculating means
else{
visibleOutputDebug[overallUniques] <- lifeRate
}
overallUniques <- overallUniques + 1
}
}
print(psaDeathDebug)
print(plantedDebug)
print(visibleOutputDebug)
print(motherUniques)
print(fatherUniques)
#endTablePrintout <- paste(endTablePrintout, '"')
#printoutLength <- nchar(endTablePrintout)
#print(printoutLength)
#endTablePrintout <- substring(endTablePrintout, 3, printoutLength)
#noquote(endTablePrintout)
#test with outputting to .csv
#write.csv(endTablePrintout, file="output.csv")
mainTable <- matrix(visibleOutputDebug, nrow=motherLength-1, ncol=fatherLength-1, dimnames = list(fatherName, motherName))
noquote(mainTable)
psaDeath <- 0
planted <- 0
lifeRate <- 0
overallUniques <- 0
plantedPreCalc <- 0
finalString <- ""
outputString <- ""
meanColumnNames <- paste("PSADeath", "Planted", "AverageAlive")
print(meanColumnNames)
#calculate mean for those father parings
for(i in 1:fatherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
currentIndex <- 0
plantedPreCalc <- 0
outputString <- ""
for(j in 1:motherUniques){
currentIndex <- (((j-1)*fatherUniques)+i)
if(is.na(plantedDebug[currentIndex])){
next
}
planted <- planted + plantedDebug[currentIndex]
psaDeath <- psaDeath + psaDeathDebug[currentIndex]
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
#lifeRate <- paste(lifeRate, "%")
}
outputString[i] <- paste(psaDeath, planted, lifeRate)
#finalString <- paste(finalString, outputString[i])
print(outputString)
}
#print(finalString)
fatherNameMeanTable <- data.frame(outputString, dimnames = list(fatherName, meanColumnNames))
noquote(fatherNameMeanTable)
#calculate mean for those mother parings
for(i in 1:motherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
currentIndex <- 0
plantedPreCalc <- 0
outputString <- ""
for(j in 1:fatherUniques){
currentIndex <- (((i-1)*fatherUniques)+j)
if(is.na(plantedDebug[currentIndex])){
next
}
planted <- planted + plantedDebug[currentIndex]
psaDeath <- psaDeath + psaDeathDebug[currentIndex]
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
lifeRate <- paste(lifeRate, "%")
}
#outputString[i] <- paste(motherName[i], psaDeath, planted, lifeRate, sep = ":")
}
---
title: "ShinyPSASorterInterim"
author: "Harrison Crane"
date: "5 December 2016"
output: html_document
---
```{r sampleCode}
test <- read.csv(file.choose(), header = TRUE)
rowCount <- nrow(test)
print(rowCount)
uniqueCouple <- levels(test[1, "BrCrCode"])
uniqueCoupleSize <- length(uniqueCouple)
print(uniqueCouple)
print(uniqueCoupleSize)
#split the string
testerSplit <- strsplit(levels(test[uniqueCouple, "BrCrCode"]), "[_]")
noquote(testerSplit)
#strip all father names (which are numbers)
fatherName <- as.numeric(gsub("\\D", "", testerSplit))
noquote(fatherName)
#count that length of numbers, for calculation later on
fatherLength <- nchar(fatherName[1])
noquote(fatherLength)
motherName <- as.character(gsub('[^[:alnum:]]', "",  testerSplit))
noquote(motherName)
motherLength <- nchar(motherName)
noquote(motherLength)
motherName <- substring(motherName, 2, (motherLength - fatherLength))
noquote(motherName)
motherName <- unique(motherName)
noquote(motherName)
fatherName <- unique(fatherName)
noquote(fatherName)
motherUniques <- length(motherName)
noquote(motherUniques)
fatherUniques <- length(fatherName)
noquote(fatherUniques)
visibleOutputDebug <- 0
psaDeathDebug <- 0
plantedDebug <- 0
endTablePrintout <- 0
overallUniques <- 1
for (i in 1:motherUniques){
for (j in 1:fatherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
searching <- paste(motherName[i], fatherName[j], sep = "_")
#print(searching)
for (k in 1:rowCount){
testingValue <- test[k, "BrCrCode"]
#print(testingValue)
if(searching == testingValue){
psaDeath <- (psaDeath + test[k, "PsaDeaths"])
psaDeathDebug[overallUniques] <- psaDeath
planted <- (planted + test[k, "Planted"])
plantedDebug[overallUniques] <- planted
}
}
#create a vector for me!
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
#if we couldn't calculate an average before, ignore it
if(planted == 0){
visibleOutputDebug[overallUniques] <-  "NA"
}
#values under 40 are discarded, but still printed out (sample too small)
else if(planted < 40 & !(planted == 0)){
visibleOutputDebug[overallUniques] <- paste(lifeRate, "STS")
}
#otherwise, lets print it out, we can use the values later for calculating means
else{
visibleOutputDebug[overallUniques] <- lifeRate
}
overallUniques <- overallUniques + 1
}
}
print(psaDeathDebug)
print(plantedDebug)
print(visibleOutputDebug)
print(motherUniques)
print(fatherUniques)
#endTablePrintout <- paste(endTablePrintout, '"')
#printoutLength <- nchar(endTablePrintout)
#print(printoutLength)
#endTablePrintout <- substring(endTablePrintout, 3, printoutLength)
#noquote(endTablePrintout)
#test with outputting to .csv
#write.csv(endTablePrintout, file="output.csv")
mainTable <- matrix(visibleOutputDebug, nrow=motherLength-1, ncol=fatherLength-1, dimnames = list(fatherName, motherName))
noquote(mainTable)
psaDeath <- 0
planted <- 0
lifeRate <- 0
overallUniques <- 0
plantedPreCalc <- 0
finalString <- ""
outputString <- ""
meanColumnNames <- paste("PSADeath", "Planted", "AverageAlive")
print(meanColumnNames)
#calculate mean for those father parings
for(i in 1:fatherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
currentIndex <- 0
plantedPreCalc <- 0
outputString <- ""
for(j in 1:motherUniques){
currentIndex <- (((j-1)*fatherUniques)+i)
if(is.na(plantedDebug[currentIndex])){
next
}
planted <- planted + plantedDebug[currentIndex]
psaDeath <- psaDeath + psaDeathDebug[currentIndex]
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
#lifeRate <- paste(lifeRate, "%")
}
outputString[i] <- paste(psaDeath, planted, lifeRate)
#finalString <- paste(finalString, outputString[i])
print(outputString)
}
#print(finalString)
fatherNameMeanTable <- data.frame(outputString, dimnames = list(fatherName, meanColumnNames))
noquote(fatherNameMeanTable)
#calculate mean for those mother parings
for(i in 1:motherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
currentIndex <- 0
plantedPreCalc <- 0
outputString <- ""
for(j in 1:fatherUniques){
currentIndex <- (((i-1)*fatherUniques)+j)
if(is.na(plantedDebug[currentIndex])){
next
}
planted <- planted + plantedDebug[currentIndex]
psaDeath <- psaDeath + psaDeathDebug[currentIndex]
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
lifeRate <- paste(lifeRate, "%")
}
#outputString[i] <- paste(motherName[i], psaDeath, planted, lifeRate, sep = ":")
}
```
example("data.frame")
example("as.data.frame.matrix")
hrlp("as.data.frame.matrix")
help("as.data.frame.matrix")
---
title: "ShinyPSASorterInterim"
author: "Harrison Crane"
date: "5 December 2016"
output: html_document
---
```{r sampleCode}
test <- read.csv(file.choose(), header = TRUE)
rowCount <- nrow(test)
print(rowCount)
uniqueCouple <- levels(test[1, "BrCrCode"])
uniqueCoupleSize <- length(uniqueCouple)
print(uniqueCouple)
print(uniqueCoupleSize)
#split the string
testerSplit <- strsplit(levels(test[uniqueCouple, "BrCrCode"]), "[_]")
noquote(testerSplit)
#strip all father names (which are numbers)
fatherName <- as.numeric(gsub("\\D", "", testerSplit))
noquote(fatherName)
#count that length of numbers, for calculation later on
fatherLength <- nchar(fatherName[1])
noquote(fatherLength)
motherName <- as.character(gsub('[^[:alnum:]]', "",  testerSplit))
noquote(motherName)
motherLength <- nchar(motherName)
noquote(motherLength)
motherName <- substring(motherName, 2, (motherLength - fatherLength))
noquote(motherName)
motherName <- unique(motherName)
noquote(motherName)
fatherName <- unique(fatherName)
noquote(fatherName)
motherUniques <- length(motherName)
noquote(motherUniques)
fatherUniques <- length(fatherName)
noquote(fatherUniques)
visibleOutputDebug <- 0
psaDeathDebug <- 0
plantedDebug <- 0
endTablePrintout <- 0
overallUniques <- 1
for (i in 1:motherUniques){
for (j in 1:fatherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
searching <- paste(motherName[i], fatherName[j], sep = "_")
#print(searching)
for (k in 1:rowCount){
testingValue <- test[k, "BrCrCode"]
#print(testingValue)
if(searching == testingValue){
psaDeath <- (psaDeath + test[k, "PsaDeaths"])
psaDeathDebug[overallUniques] <- psaDeath
planted <- (planted + test[k, "Planted"])
plantedDebug[overallUniques] <- planted
}
}
#create a vector for me!
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
#if we couldn't calculate an average before, ignore it
if(planted == 0){
visibleOutputDebug[overallUniques] <-  "NA"
}
#values under 40 are discarded, but still printed out (sample too small)
else if(planted < 40 & !(planted == 0)){
visibleOutputDebug[overallUniques] <- paste(lifeRate, "STS")
}
#otherwise, lets print it out, we can use the values later for calculating means
else{
visibleOutputDebug[overallUniques] <- lifeRate
}
overallUniques <- overallUniques + 1
}
}
print(psaDeathDebug)
print(plantedDebug)
print(visibleOutputDebug)
print(motherUniques)
print(fatherUniques)
#endTablePrintout <- paste(endTablePrintout, '"')
#printoutLength <- nchar(endTablePrintout)
#print(printoutLength)
#endTablePrintout <- substring(endTablePrintout, 3, printoutLength)
#noquote(endTablePrintout)
#test with outputting to .csv
#write.csv(endTablePrintout, file="output.csv")
mainTable <- matrix(visibleOutputDebug, nrow=motherLength-1, ncol=fatherLength-1, dimnames = list(fatherName, motherName))
noquote(mainTable)
psaDeath <- 0
planted <- 0
lifeRate <- 0
overallUniques <- 0
plantedPreCalc <- 0
finalString <- ""
outputString <- ""
meanColumnNames <- paste("FatherName", "PSADeath", "Planted", "AverageAlive")
print(meanColumnNames)
#calculate mean for those father parings
for(i in 1:fatherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
currentIndex <- 0
plantedPreCalc <- 0
outputString <- ""
for(j in 1:motherUniques){
currentIndex <- (((j-1)*fatherUniques)+i)
if(is.na(plantedDebug[currentIndex])){
next
}
planted <- planted + plantedDebug[currentIndex]
psaDeath <- psaDeath + psaDeathDebug[currentIndex]
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
fatherNameMeanTable <- data.frame(fatherName, planted, psaDeath, lifeRate)
#lifeRate <- paste(lifeRate, "%")
}
#outputString[i] <- paste(fatherName, psaDeath, planted, lifeRate)
#finalString <- paste(finalString, outputString[i])
#print(outputString[i])
}
print(dim(fatherNameMeanTable))
print(as.data.frame.matrix(fatherNameMeanTable[1:fatherUniques, 1:4]))
#calculate mean for those mother parings
for(i in 1:motherUniques){
psaDeath <- 0
planted <- 0
lifeRate <- 0
currentIndex <- 0
plantedPreCalc <- 0
outputString <- ""
for(j in 1:fatherUniques){
currentIndex <- (((i-1)*fatherUniques)+j)
if(is.na(plantedDebug[currentIndex])){
next
}
planted <- planted + plantedDebug[currentIndex]
psaDeath <- psaDeath + psaDeathDebug[currentIndex]
lifeRate <- (100 - ((psaDeath / planted) * 100))
lifeRate <- format(round(lifeRate, 2), nsmall = 2)
lifeRate <- paste(lifeRate, "%")
}
#outputString[i] <- paste(motherName[i], psaDeath, planted, lifeRate, sep = ":")
}
```
View(d)
View(d.0)
View(d0)
View(d00)
View(dd)
View(fatherNameMeanTable)
View(test)
View(dd)
View(fatherNameMeanTable)
example(data.frame)
rowCount <- nrow(test)
print(rowCount)
uniqueCouple <- levels(test[1, "BrCrCode"])
uniqueCoupleSize <- length(uniqueCouple)
print(uniqueCouple)
print(uniqueCoupleSize)
#split the string
testerSplit <- strsplit(levels(test[uniqueCouple, "BrCrCode"]), "[_]")
noquote(testerSplit)
#strip all father names (which are numbers)
fatherName <- sapply(testerSplit, function(x)as.numeric(x[[2]]))
noquote(fatherName)
#count that length of numbers, for calculation later on
fatherLength <- nchar(fatherName[1])
noquote(fatherLength)
motherName <- as.character(gsub('[^[:alnum:]]', "",  testerSplit))
rowCount <- nrow(test)
print(rowCount)
uniqueCouple <- levels(test[1, "BrCrCode"])
uniqueCoupleSize <- length(uniqueCouple)
print(uniqueCouple)
print(uniqueCoupleSize)
#split the string
testerSplit <- strsplit(levels(test[uniqueCouple, "BrCrCode"]), "[_]")
noquote(testerSplit)
#strip all father names (which are numbers)
fatherName <- sapply(testerSplit, function(x)as.numeric(x[[2]]))
noquote(fatherName)
#count that length of numbers, for calculation later on
fatherLength <- nchar(fatherName[1])
noquote(fatherLength)
motherName <- as.character(gsub('[^[:alnum:]]', "",  testerSplit))
test <- read.csv(file.choose(), header = TRUE)
rowCount <- nrow(test)
print(rowCount)
uniqueCouple <- levels(test[1, "BrCrCode"])
uniqueCoupleSize <- length(uniqueCouple)
print(uniqueCouple)
print(uniqueCoupleSize)
#split the string
testerSplit <- strsplit(levels(test[uniqueCouple, "BrCrCode"]), "[_]")
noquote(testerSplit)
#strip all father names (which are numbers)
fatherName <- sapply(testerSplit, function(x)as.numeric(x[[2]]))
noquote(fatherName)
#count that length of numbers, for calculation later on
fatherLength <- nchar(fatherName[1])
noquote(fatherLength)
motherName <- as.character(gsub('[^[:alnum:]]', "",  testerSplit))
motherName2 <- sapply(testerSplit, function(x)x[[1]])
testerSplit
View(test)
(fatherName)
? seek
? seq
1:0
fatherName[1:0]
fatherName[1:-1]
fatherName[0:-1]
seq(motherUniques)
seq(motherName)
seq_along(motherName)
? match
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/shinyAppTest')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/shinyAppTest')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/shinyAppTest')
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/filteredDownloads/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload')
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload mumdad2d')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload mumdad2d')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload mumdad2d')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload mumdad2d')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload mumdad2d')
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
? length
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload abstraction')
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
shiny::runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
runApp('C:/Analysis/github/eBrida/AllShinyAppsToDate/ShinyPSASorter/filteredDownload multipleRun')
